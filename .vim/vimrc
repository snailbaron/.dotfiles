filetype indent off
filetype plugin on

syntax enable

colorscheme base16-default-dark
highlight SpellBad   cterm=None ctermfg=0 ctermbg=1
highlight SpellLocal cterm=None ctermfg=0 ctermbg=12
highlight SpellCap   cterm=None ctermfg=0 ctermbg=13
highlight SpellRare  cterm=None ctermfg=0 ctermbg=14

set rtp+=~/.fzf

set autoindent
set autoread
set backspace=indent,eol,start
set colorcolumn=81
if v:version >= 800
    set completeopt=menu,menuone,preview,noselect,noinsert
else
    set completeopt=menu,menuone,preview
endif
set cursorline
set encoding=utf-8
set expandtab
set fillchars=vert:│,fold:-
set formatoptions+=j
set history=1000
set hlsearch
set incsearch
set listchars=tab:▸\ ,trail:·,extends:>,precedes:<,nbsp:+,eol:¬
set mouse=a
set nobackup
set nocindent
set nosmartindent
set number
set shiftwidth=4
set splitbelow
set splitright
set tabstop=4
set timeoutlen=1000 ttimeoutlen=0
set ttymouse=xterm2  " makes mouse play nice with tmux
set wildmenu
set wildmode=longest:full
set writebackup

set langmap=
    \ё`,Ё~,
    \йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],
    \фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',
    \яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.
    \ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},
    \ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",
    \ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>

" If cursor is on first or last line of the window, scroll to put current line
" in the middle.
function! CenterOnCursorIfOnEdge()
    let cursor_line = winline()
    if cursor_line == 1 || cursor_line == winheight(0)
        normal! zz
    endif
endfunction

nnoremap <silent> <C-]>:call CenterOnCursorIfOnEdge()<CR>
nnoremap <silent> n n:call CenterOnCursorIfOnEdge()<CR>

nnoremap <leader>l :set list!<CR>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match Error /\s\+$\|\t/
    else
        match Error /\s\+$/
    endif
endfunction

autocmd FileType html,xml,fbs,yaml setlocal tabstop=2 shiftwidth=2

autocmd Syntax c,cpp,python setlocal foldmethod=syntax
autocmd Syntax c,cpp,python normal zR

" vim-airline
let g:airline_theme='base16_default_dark'

" NERDTree
let g:NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 50
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMapJumpNextSibling = ''

nnoremap <silent> <F4> :NERDTreeToggle<CR>
noremap <silent> <F1> :NERDTreeFocus<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" vim-dispatch
nnoremap <silent> <F7> :Dispatch<CR>

" fzf
nnoremap <C-P> :FZF<CR>

" YouCompleteMe
let g:ycm_auto_hover = ''
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_clangd_args=['--header-insertion=never']
if v:version >= 800
    let g:ycm_clangd_binary_path = exepath('clangd')
else
    let g:ycm_clangd_binary_path = 'clangd'
endif
let g:ycm_clangd_uses_ycmd_caching = 0
let g:ycm_extra_conf_globlist = ['!~/*']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_server_log_level = 'debug'
let g:ycm_warning_symbol = '~>'

let g:ycm_filetype_blacklist = {
    \ 'nerdtree': 1
    \}

nnoremap <silent> gd :YcmCompleter GoTo<CR>
nnoremap <silent> gr :YcmCompleter GoToReferences<CR>

" ALE

let g:ale_echo_msg_format = '[%linter%] [%severity%] (%code%) %s'

let g:ale_linters = {
\   'cpp': [],
\   'python': ['pylint'],
\ }

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\ }

" let g:ale_fix_on_save = 1

" vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" Seamless resize in Vim/tmux
let g:tmux_resize_vertical_step = 3
let g:tmux_resize_horizontal_step = 5

function! s:CanMove(vertical, screenpos)
    if a:vertical
        let windowTop = a:screenpos - winline() + 1
        let windowBottom = windowTop + winheight(0) + 2
        return [windowTop > 1, windowBottom < &lines]
    else
        let windowLeft = a:screenpos - wincol() + 1
        let windowRight = windowLeft + winwidth(0) - 1
        return [windowLeft > 1, windowRight < &columns]
    endif
endfunction

function! s:IsLastTmuxPane(forwardDirection)
    if a:forwardDirection == 'l'
        let pane_right = system("tmux display -p '#{pane_right}'")
        let window_width = system("tmux display -p '#{window_width}'")
        return pane_right + 1 == window_width
    elseif a:forwardDirection == 'j'
        let pane_bottom = system("tmux display -p '#{pane_bottom}'")
        let window_height = system("tmux display -p '#{window_height}'")
        return pane_bottom + 1 == window_height
    endif
endfunction

function! TmuxResize(positive, vertical, tmuxDirection, step, forwardDirection, backDirection)
    let position = [screencol(), screenrow()]
    let canMove = s:CanMove(a:vertical, position[a:vertical])
    let firstWindow = !canMove[0]
    let lastWindow = !canMove[1]

    if $TMUX != '' && lastWindow && (firstWindow || !s:IsLastTmuxPane(a:forwardDirection))
        silent call system('tmux resize-pane -' . a:tmuxDirection . ' ' . a:step)
        "redraw!
    else
        let sign = xor(a:positive, lastWindow) ? '+' : '-'
        let prefix = a:vertical ? '' : 'vertical '
        execute prefix . 'resize ' . sign . a:step
    endif
    "redraw!
endfunction

command! TmuxResizeLeft :call TmuxResize(0, 0, 'L', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeRight :call TmuxResize(1, 0, 'R', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeDown :call TmuxResize(1, 1, 'D', g:tmux_resize_vertical_step, 'j', 'k')
command! TmuxResizeUp :call TmuxResize(0, 1, 'U', g:tmux_resize_vertical_step, 'j', 'k')

nnoremap <silent> <M-h> :TmuxResizeLeft<CR>
nnoremap <silent> <M-l> :TmuxResizeRight<CR>
nnoremap <silent> <M-j> :TmuxResizeDown<CR>
nnoremap <silent> <M-k> :TmuxResizeUp<CR>

nnoremap <silent> <Esc>h :TmuxResizeLeft<CR>
nnoremap <silent> <Esc>l :TmuxResizeRight<CR>
nnoremap <silent> <Esc>j :TmuxResizeDown<CR>
nnoremap <silent> <Esc>k :TmuxResizeUp<CR>

" Terminal mode and termdebug
if v:version > 800 || v:version == 800 && has("patch587")
    autocmd BufWinEnter,WinEnter term://* startinsert
    autocmd BufLeave term://* stopinsert

    nmap <silent> <F11> :Step<CR>
    nmap <silent> <F10> :Over<CR>
    nmap <silent> <F9> :Break<CR>
    nmap <silent> <S-F9> :Delete<CR>
    nmap <silent> <S-F7> :Finish<CR>

    tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
    "tnoremap <silent> <C-\> <C-w>:TmuxNavigatePrevious<cr>

    tnoremap <silent> <M-h> <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <M-l> <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <M-j> <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <M-k> <C-w>:TmuxResizeUp<CR>

    tnoremap <silent> <Esc>h <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <Esc>l <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <Esc>j <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <Esc>k <C-w>:TmuxResizeUp<CR>
endif

silent! helptags ALL
