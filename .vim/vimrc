call plug#begin()
    Plug 'https://github.com/LnL7/vim-nix.git'
    Plug 'https://github.com/altercation/vim-colors-solarized.git'
    Plug 'https://github.com/bazelbuild/vim-bazel.git'
    Plug 'https://github.com/chriskempson/base16-vim.git'
    Plug 'https://github.com/christoomey/vim-tmux-navigator.git'
    Plug 'https://github.com/dawikur/base16-vim-airline-themes.git'
    Plug 'https://github.com/dense-analysis/ale.git'
    Plug 'https://github.com/dhruvasagar/vim-table-mode'
    Plug 'https://github.com/fguisso/sfer.nvim.git'
    Plug 'https://github.com/gerw/vim-HiLinkTrace.git'
    Plug 'https://github.com/google/vim-maktaba'
    Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'https://github.com/kaicataldo/material.vim'
    Plug 'https://github.com/neoclide/coc.nvim', {'branch': 'release'}
    Plug 'https://github.com/preservim/nerdtree.git'
    Plug 'https://github.com/tikhomirov/vim-glsl'
    Plug 'https://github.com/tpope/vim-dispatch.git'
    Plug 'https://github.com/tpope/vim-unimpaired.git'
    Plug 'https://github.com/tpope/vim-vinegar.git'
    Plug 'https://github.com/vim-airline/vim-airline.git'
    Plug 'https://github.com/zchee/vim-flatbuffers.git'
call plug#end()

filetype plugin indent on

"let g:loaded_youcompleteme = 1
"let g:loaded_ale_dont_use_this_in_other_plugins_please = 1

syntax enable
if v:version >= 900
    " I don't know why termguicolors messes up older Vim, and I don't care
    set termguicolors
endif

"let g:material_theme_style = 'darker'
let g:material_theme_style = 'darker'
colorscheme material
exec 'hi Error guifg=' . g:material_colorscheme_map.comments.gui

" colorscheme base16-default-dark
" highlight SpellBad   cterm=None ctermfg=0 ctermbg=1
" highlight SpellLocal cterm=None ctermfg=0 ctermbg=12
" highlight SpellCap   cterm=None ctermfg=0 ctermbg=13
" highlight SpellRare  cterm=None ctermfg=0 ctermbg=14

set autoindent
set autoread
set backspace=indent,eol,start
set colorcolumn=81
if v:version >= 800
    set completeopt=menu,menuone,popup,noselect
else
    set completeopt=menu,menuone,preview
endif
set cursorline
set directory=~/.cache/vimswap//,.,~/tmp,/var/tmp,/tmp
set encoding=utf-8
set expandtab
set fillchars=vert:│,fold:-
set foldlevel=99
set foldmethod=manual
set formatoptions+=j
set history=1000
set hlsearch
set incsearch
set listchars=tab:▸\ ,lead:·,trail:·,extends:>,precedes:<,nbsp:+,eol:¬
set mouse=a
set nobackup
set nocindent
set nosmartindent
set number
set shiftwidth=4
set signcolumn=yes
set softtabstop=4
set splitbelow
set splitright
set tabstop=8
set timeoutlen=1000 ttimeoutlen=0
set ttymouse=xterm2  " makes mouse play nice with tmux
set wildmenu
set wildmode=longest:full
set writebackup

if executable('ag')
    set grepprg=ag\ --hidden\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
endif

set langmap=
    \ё`,Ё~,
    \йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],
    \фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',
    \яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.
    \ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},
    \ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",
    \ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>

nnoremap <leader>l :set list!<CR>
vnoremap <leader>s :sort<CR>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match Error /\s\+$\|\t/
    else
        match Error /\s\+$/
    endif
endfunction

packadd! matchit

" vim-airline
let g:airline_theme='base16_default_dark'

" NERDTree
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeIgnore = []
let g:NERDTreeMapJumpNextSibling = ''
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 50

nnoremap <silent> <F4> :NERDTreeToggle<CR>
noremap <silent> <F1> :NERDTreeFocus<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" vim-dispatch
nnoremap <silent> <F7> :Dispatch<CR>

" fzf
nnoremap <C-P> :FZF<CR>

" coc.nvim
" https://raw.githubusercontent.com/neoclide/coc.nvim/master/doc/coc-example-config.vim

" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gt <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>q  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')
nnoremap <silent> <leader>z :call CocActionAsync('format')<cr>

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Python virtual environment

function! Venv()
    py3 << EOF
import os
import sys

venv_path = "/home/immartynov/.venv"
activate_file_path = os.path.join(venv_path, 'bin/activate')
exec(open(activate_file_path).read(), dict(__file__=activate_file_path))
EOF
endfunction

" ALE

let g:ale_disable_lsp = 1
let g:ale_echo_msg_format = '[%linter%] [%severity%] (%code%) %s'
let g:ale_virtualtext_cursor = 'current'

let g:ale_linters = {
\   'c': [],
\   'cmake': [],
\   'cpp': [],
\   'json': ['biome'],
\   'nix': ['nixpkgs-fmt'],
\   'php': [],
\   'proto': ['buf_lint', 'protolint'],
\   'python': ['pylint', 'ruff'],
\   'yaml': ['yaml-language-server', 'yamllint', 'yq'],
\ }

autocmd BufRead,BufNewFile .github/workflows/*.yaml
    \ let b:ale_linters = ['actionlint', 'yaml-language-server', 'yamllint', 'yq']

let g:ale_fixers = {
\   '*': ['remove_trailing_lines'],
\   'bzl': ['buildifier'],
\   'cpp': ['clang-format'],
\   'json': ['jq'],
\   'python': ['black', 'isort'],
\   'sh': ['shfmt'],
\   'xml': ['xmllint'],
\ }

let g:ale_python_mypy_options = '--strict --python-executable=python3'
let g:ale_python_flake8_options = '--ignore=E203,E501,E701,E704,W503 --extend-select=B950 --max-line-length=88'
let g:ale_python_isort_options = '--profile black'
let g:ale_json_jq_options = '--indent 4'
let g:ale_sh_bashate_options = '-i E003'
let g:ale_python_pyright_auto_poetry = 1

nnoremap <silent> <leader>x :ALEFix<cr>

" let g:ale_fix_on_save = 1

" vim-polyglot
let g:polyglot_disabled = ['sensible']

" vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1
nmap <C-h> :TmuxNavigateLeft<cr>
nmap <C-j> :TmuxNavigateDown<cr>
nmap <C-k> :TmuxNavigateUp<cr>
nmap <C-l> :TmuxNavigateRight<cr>

" Seamless resize in Vim/tmux
let g:tmux_resize_vertical_step = 3
let g:tmux_resize_horizontal_step = 5

function! s:CanMove(vertical, screenpos)
    if a:vertical
        let windowTop = a:screenpos - winline() + 1
        let windowBottom = windowTop + winheight(0) + 2
        return [windowTop > 1, windowBottom < &lines]
    else
        let windowLeft = a:screenpos - wincol() + 1
        let windowRight = windowLeft + winwidth(0) - 1
        return [windowLeft > 1, windowRight < &columns]
    endif
endfunction

function! s:IsLastTmuxPane(forwardDirection)
    if a:forwardDirection == 'l'
        let pane_right = system("tmux display -p '#{pane_right}'")
        let window_width = system("tmux display -p '#{window_width}'")
        return pane_right + 1 == window_width
    elseif a:forwardDirection == 'j'
        let pane_bottom = system("tmux display -p '#{pane_bottom}'")
        let window_height = system("tmux display -p '#{window_height}'")
        return pane_bottom + 1 == window_height
    endif
endfunction

function! TmuxResize(positive, vertical, tmuxDirection, step, forwardDirection, backDirection)
    let position = [screencol(), screenrow()]
    let canMove = s:CanMove(a:vertical, position[a:vertical])
    let firstWindow = !canMove[0]
    let lastWindow = !canMove[1]

    if $TMUX != '' && lastWindow && (firstWindow || !s:IsLastTmuxPane(a:forwardDirection))
        silent call system('tmux resize-pane -' . a:tmuxDirection . ' ' . a:step)
        "redraw!
    else
        let sign = xor(a:positive, lastWindow) ? '+' : '-'
        let prefix = a:vertical ? '' : 'vertical '
        execute prefix . 'resize ' . sign . a:step
    endif
    "redraw!
endfunction

command! TmuxResizeLeft :call TmuxResize(0, 0, 'L', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeRight :call TmuxResize(1, 0, 'R', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeDown :call TmuxResize(1, 1, 'D', g:tmux_resize_vertical_step, 'j', 'k')
command! TmuxResizeUp :call TmuxResize(0, 1, 'U', g:tmux_resize_vertical_step, 'j', 'k')

nnoremap <silent> <M-h> :TmuxResizeLeft<CR>
nnoremap <silent> <M-l> :TmuxResizeRight<CR>
nnoremap <silent> <M-j> :TmuxResizeDown<CR>
nnoremap <silent> <M-k> :TmuxResizeUp<CR>

nnoremap <silent> <Esc>h :TmuxResizeLeft<CR>
nnoremap <silent> <Esc>l :TmuxResizeRight<CR>
nnoremap <silent> <Esc>j :TmuxResizeDown<CR>
nnoremap <silent> <Esc>k :TmuxResizeUp<CR>

if has('terminal')
    packadd termdebug

    let g:termdebug_config = {
        \ 'wide': 1
        \ }

    autocmd BufWinEnter,WinEnter term://* startinsert
    autocmd BufLeave term://* stopinsert

    hi debugPC term=reverse ctermbg=11 guibg=lightblue
    hi debugBreakpoint term=reverse ctermbg=1 guibg=red

    nmap <silent> <F5> :Run<CR>
    nmap <silent> <F9> :Break<CR>
    nmap <silent> <S-F9> :Clear<CR>
    nmap <silent> <F11> :Step<CR>
    nmap <silent> <F10> :Over<CR>
    nmap <silent> <S-F7> :Finish<CR>

    tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
    "tnoremap <silent> <C-\> <C-w>:TmuxNavigatePrevious<cr>

    tnoremap <silent> <M-h> <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <M-l> <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <M-j> <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <M-k> <C-w>:TmuxResizeUp<CR>

    tnoremap <silent> <Esc>h <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <Esc>l <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <Esc>j <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <Esc>k <C-w>:TmuxResizeUp<CR>

    let g:termdebug_config = {
    \   'wide': 1
    \ }
endif

silent! helptags ALL

if filereadable(expand("~/.vimrc_local"))
    source ~/.vimrc_local
endif
