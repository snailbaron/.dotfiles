execute pathogen#infect()

syntax enable
colorscheme desert

set nobackup
set writebackup

set tabstop=4
set shiftwidth=4
set expandtab

set nocindent
set nosmartindent
set autoindent

set number
set hlsearch

if has('win32')
    language english
else
    language en_US.UTF-8
endif

inoremap <S-Tab> <C-d>


autocmd FileType make set noexpandtab

" NERDTree
nmap <F8> :NERDTreeToggle<CR>

"
" YouCompleteMe
"

" Do not use TAB for selection from completion list
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']

" Mappings for GoTo commands
nmap <F12> :YcmCompleter GoTo<CR>
nmap <C-S-g> :YcmCompleter GoToInclude<CR>

""" Colors and highlighting

" Color column 81
set colorcolumn=81
highlight ColorColumn ctermbg=8

"
" Resize current window like tmux: move current window's right/bottom side,
" unless we are in a rightmost/bottommost window; in that case, resize the one
" on the left/top.
"

function! CanMoveToWindow(direction)
    let canMove = 1

    let myWindow = winnr()
    execute 'wincmd ' . a:direction
    if winnr() == myWindow
        let canMove = 0
    endif
    execute myWindow . 'wincmd w'

    return canMove
endfunction

function! ResizeWindowRight()
    if CanMoveToWindow('l')
        execute '5wincmd>'
    else
        execute '5wincmd<'
    endif
endfunction

function! ResizeWindowLeft()
    if CanMoveToWindow('h')
        execute '5wincmd>'
    else
        execute '5wincmd<'
    endif
endfunction

function! ResizeWindowUp()
    if CanMoveToWindow('k')
        execute '3wincmd+'
    else
        execute '3wincmd-'
    endif
endfunction

function! ResizeWindowDown()
    if CanMoveToWindow('j')
        execute '3wincmd+'
    else
        execute '3wincmd-'
    endif
endfunction

" Map Ctrl+<arrow> input from tmux configured as:
" * 'xterm-keys' window option set
" * Using 'screen-256color' TERM
"
" screen* TERM is basically required for correct rendering of panes, etc.
" xterm escape sequences are easier to map in Vim somehow.
nmap [1;5A <C-Up>
nmap [1;5B <C-Down>
nmap [1;5C <C-Right>
nmap [1;5D <C-Left>

nnoremap <silent> <C-Left> :call ResizeWindowLeft()<CR>
nnoremap <silent> <C-Down> :call ResizeWindowDown()<CR>
nnoremap <silent> <C-Up> :call ResizeWindowUp()<CR>
nnoremap <silent> <C-Right> :call ResizeWindowRight()<CR>

