if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'christoomey/vim-tmux-navigator'
Plug 'gerw/vim-HiLinkTrace'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-plug'
Plug 'pboettch/vim-cmake-syntax'
Plug 'scrooloose/nerdtree'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'zchee/vim-flatbuffers'

if v:version > 704 || v:version == 704 && has("patch1578")
    Plug 'Valloric/YouCompleteMe', {
    \   'do': 'python3 install.py'
    \         + ' --clang-completer'
    \         + ' --clangd-completer'
    \         + ' --ts-completer'
    \ }
endif

call plug#end()

filetype indent off
filetype plugin on

syntax enable

" Create highlight group for improper whitespace usage
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=5 guibg=red

colorscheme snailbaron

set autoindent
set autoread
set backspace=indent,eol,start
set colorcolumn=81
set completeopt=menu,menuone,preview,noselect,noinsert
set cursorline
set encoding=utf-8
set expandtab
set fillchars=vert:â”‚,fold:-
set formatoptions+=j
set history=1000
set hlsearch
set incsearch
set mouse=a
set nobackup
set nocindent
set nosmartindent
set number
set shiftwidth=4
set splitbelow
set splitright
set tabstop=4
set timeoutlen=1000 ttimeoutlen=0
set ttymouse=xterm2  " makes mouse play nice with tmux
set wildmenu
set writebackup

if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

" If cursor is on first or last line of the window, scroll to put current line
" in the middle.
function! CenterOnCursorIfOnEdge()
    let cursor_line = winline()
    if cursor_line == 1 || cursor_line == winheight(0)
        normal! zz
    endif
endfunction

nnoremap <silent> <C-]>:call CenterOnCursorIfOnEdge()<CR>
nnoremap <silent> n n:call CenterOnCursorIfOnEdge()<CR>

vnoremap <Tab> <Esc>gV
onoremap <Tab> <Esc>
cnoremap <Tab> <C-C><Esc>
inoremap <Tab> <Esc>`^
inoremap <Leader><Tab> <Tab>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match ExtraWhitespace /\s\+$\|\t/
    else
        match ExtraWhitespace /\s\+$/
    endif
endfunction

autocmd FileType html,xml,fbs,yaml setlocal tabstop=2 shiftwidth=2


" NERDTree
let g:NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 61
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMapJumpNextSibling = ''

nnoremap <silent> <F4> :NERDTreeToggle<CR>
noremap <silent> <F1> :NERDTreeFocus<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" vim-dispatch
nnoremap <silent> <F7> :Dispatch<CR>

" fzf
nnoremap <C-P> :FZF<CR>

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.global_ycm_extra_conf.py'
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_server_log_level = 'debug'
let g:ycm_server_use_vim_stdout = 1
let g:ycm_show_diagnostics_ui = 1
let g:ycm_warning_symbol = '~>'

nnoremap <silent> gd :YcmCompleter GoTo<CR>

" vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>
set wildchar=<C-e>

" Seamless resize in Vim/tmux
let g:tmux_resize_vertical_step = 3
let g:tmux_resize_horizontal_step = 5

function! s:CanMove(vertical, screenpos)
    if a:vertical
        let windowTop = a:screenpos - winline() + 1
        let windowBottom = windowTop + winheight(0) + 2
        return [windowTop > 1, windowBottom < &lines]
    else
        let windowLeft = a:screenpos - wincol() + 1
        let windowRight = windowLeft + winwidth(0) - 1
        return [windowLeft > 1, windowRight < &columns]
    endif
endfunction

function! s:IsLastTmuxPane(forwardDirection)
    if a:forwardDirection == 'l'
        let pane_right = system("tmux display -p '#{pane_right}'")
        let window_width = system("tmux display -p '#{window_width}'")
        return pane_right + 1 == window_width
    elseif a:forwardDirection == 'j'
        let pane_bottom = system("tmux display -p '#{pane_bottom}'")
        let window_height = system("tmux display -p '#{window_height}'")
        return pane_bottom + 1 == window_height
    endif
endfunction

function! TmuxResize(positive, vertical, tmuxDirection, step, forwardDirection, backDirection)
    let position = [screencol(), screenrow()]
    let canMove = s:CanMove(a:vertical, position[a:vertical])
    let firstWindow = !canMove[0]
    let lastWindow = !canMove[1]

    if $TMUX != '' && lastWindow && (firstWindow || !s:IsLastTmuxPane(a:forwardDirection))
        silent call system('tmux resize-pane -' . a:tmuxDirection . ' ' . a:step)
        "redraw!
    else
        let sign = xor(a:positive, lastWindow) ? '+' : '-'
        let prefix = a:vertical ? '' : 'vertical '
        execute prefix . 'resize ' . sign . a:step
    endif
    "redraw!
endfunction

command! TmuxResizeLeft :call TmuxResize(0, 0, 'L', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeRight :call TmuxResize(1, 0, 'R', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeDown :call TmuxResize(1, 1, 'D', g:tmux_resize_vertical_step, 'j', 'k')
command! TmuxResizeUp :call TmuxResize(0, 1, 'U', g:tmux_resize_vertical_step, 'j', 'k')

nnoremap <silent> <M-h> :TmuxResizeLeft<CR>
nnoremap <silent> <M-l> :TmuxResizeRight<CR>
nnoremap <silent> <M-j> :TmuxResizeDown<CR>
nnoremap <silent> <M-k> :TmuxResizeUp<CR>

nnoremap <silent> <Esc>h :TmuxResizeLeft<CR>
nnoremap <silent> <Esc>l :TmuxResizeRight<CR>
nnoremap <silent> <Esc>j :TmuxResizeDown<CR>
nnoremap <silent> <Esc>k :TmuxResizeUp<CR>

" Terminal mode and termdebug
if v:version > 800 || v:version == 800 && has("patch587")
    autocmd BufWinEnter,WinEnter term://* startinsert
    autocmd BufLeave term://* stopinsert

    nmap <silent> <F11> :Step<CR>
    nmap <silent> <F10> :Over<CR>
    nmap <silent> <F9> :Break<CR>
    nmap <silent> <S-F9> :Delete<CR>
    nmap <silent> <S-F7> :Finish<CR>

    tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
    "tnoremap <silent> <C-\> <C-w>:TmuxNavigatePrevious<cr>

    tnoremap <silent> <M-h> <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <M-l> <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <M-j> <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <M-k> <C-w>:TmuxResizeUp<CR>

    tnoremap <silent> <Esc>h <C-w>:TmuxResizeLeft<CR>
    tnoremap <silent> <Esc>l <C-w>:TmuxResizeRight<CR>
    tnoremap <silent> <Esc>j <C-w>:TmuxResizeDown<CR>
    tnoremap <silent> <Esc>k <C-w>:TmuxResizeUp<CR>
endif

silent! helptags ALL
