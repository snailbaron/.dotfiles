call plug#begin('~/.vim/plugged')

Plug 'PProvost/vim-ps1'
Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer'}
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/Conque-GDB'

call plug#end()

syntax enable

" Create highlight group for improper whitespace usage
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=5 guibg=red

colorscheme desert

set nobackup
set writebackup

set tabstop=4
set shiftwidth=4
set expandtab

set nocindent
set nosmartindent
set autoindent
set backspace=indent,eol,start
set encoding=utf-8

set number
set hlsearch

" Enable mouse support, and make it play nice with tmux
set mouse=a
set ttymouse=xterm2

set timeoutlen=0 ttimeoutlen=0

" English, do you speak it?
if has('win32')
    language english
else
    language en_US.UTF-8
endif

inoremap <S-Tab> <C-d>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

""" Colors and highlighting

" Color column 81 with light gray
set colorcolumn=81
highlight ColorColumn ctermbg=magenta

" Indicate current line with deep black
set cursorline
highlight CursorLine cterm=NONE ctermbg=black guibg=black

"
" netrw
"

let g:netrw_banner = 0
let g:netrw_sort_sequence = "[\/]$"

"
" YouCompleteMe
"
" YCM options are documented here:
"     https://github.com/Valloric/YouCompleteMe#options
"

" Fallback global YCM configuration file
let g:ycm_global_ycm_extra_conf = '~/.global_ycm_extra_conf.py'

" Do not use TAB for selection from completion list
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']

let g:ycm_warning_symbol = '~>'

" Do not ask if it is safe to load a configuration file. WARNING: allows
" execution of malicious .ycm_extra_conf.py.
let g:ycm_confirm_extra_conf = 0

" Highlight YCM errors with less acid color
highlight YcmErrorSection ctermbg=5

" Mappings for GoTo commands
nmap <F12> :YcmCompleter GoTo<CR>
nmap <C-S-g> :YcmCompleter GoToInclude<CR>

"
" Function to run each time when opening a new buffer
"

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match ExtraWhitespace /\s\+$\|\t/
    else
        match ExtraWhitespace /\s\+$/
    endif
endfunction

"
" Seamless resize in Vim/tmux
"

let g:tmux_resize_vertical_step = 3
let g:tmux_resize_horizontal_step = 5

function! s:Back(orientation)
    if a:orientation == 'h'
        return 'h'
    elseif a:orientation == 'v'
        return 'k'
    endif
endfunction

function! s:Forward(orientation)
    if a:orientation == 'h'
        return 'l'
    elseif a:orientation == 'v'
        return 'j'
    endif
endfunction

function! s:Orientation(direction)
    let orientation_mapping = {'h': 'h', 'j': 'v', 'k': 'v', 'l': 'h'}
    return orientation_mapping[a:direction]
endfunction

function! s:Step(orientation)
    if a:orientation == 'h'
        return g:tmux_resize_horizontal_step
    elseif a:orientation == 'v'
        return g:tmux_resize_vertical_step
    endif
endfunction

function! s:Inverse(direction)
    let inverse_directions = {'h': 'l', 'j': 'k', 'k': 'j', 'l': 'h'}
    return inverse_directions[a:direction]
endfunction

function! s:CanMove(direction)
    let nr = winnr()
    execute 'wincmd ' . a:direction
    let success = (nr != winnr())
    if success
        execute 'wincmd ' . s:Inverse(a:direction)
    endif
    return success
endfunction

function! s:Sign(direction)
    let mapping = {'h': '-', 'j': '+', 'k': '-', 'l': '+'}
    return mapping[a:direction]
endfunction

function! s:IsFirstBuffer(orientation)
    return !s:CanMove(s:Back(a:orientation))
endfunction

function! s:IsLastBuffer(orientation)
    return !s:CanMove(s:Forward(a:orientation))
endfunction

function! s:TmuxDirection(direction)
    let mapping = {'h': 'L', 'j': 'D', 'k': 'U', 'l': 'R'}
    return mapping[a:direction]
endfunction

function! s:IsLastTmuxPane(orientation)
    if a:orientation == 'h'
        let pane_right = system("tmux display -p '#{pane_right}'")
        let window_width = system("tmux display -p '#{window_width}'")
        return pane_right + 1 == window_width
    elseif a:orientation == 'v'
        let pane_bottom = system("tmux display -p '#{pane_bottom}'")
        let window_height = system("tmux display -p '#{window_height}'")
        return pane_bottom + 1 == window_height
    endif
endfunction

function! s:TmuxResize(direction)
    let orientation = s:Orientation(a:direction)
    let step = s:Step(orientation)
    let lastBuffer = s:IsLastBuffer(orientation)
    let lastTmuxPane = s:IsLastTmuxPane(orientation)
    let firstBuffer = s:IsFirstBuffer(orientation)
    if lastBuffer && (!s:IsLastTmuxPane(orientation) || s:IsFirstBuffer(orientation))
        "silent! execute '!tmux resize-pane -' . s:TmuxDirection(a:direction) . ' ' . step
        silent call system('tmux resize-pane -' . s:TmuxDirection(a:direction) . ' ' . step)
        "call job_start('tmux resize-pane -' . s:TmuxDirection(a:direction) . ' ' . step)
        "redraw!
    else
        let prefix = orientation == 'h' ? 'vertical ' : ''
        let direction = a:direction
        if lastBuffer
            let direction = s:Inverse(direction)
        endif
        execute prefix . 'resize ' . s:Sign(direction) . step
    endif
    "redraw!
endfunction

command! TmuxResizeLeft call s:TmuxResize('h')
command! TmuxResizeRight call s:TmuxResize('l')
command! TmuxResizeDown call s:TmuxResize('j')
command! TmuxResizeUp call s:TmuxResize('k')

nnoremap <M-h> :TmuxResizeLeft<CR>
nnoremap <M-l> :TmuxResizeRight<CR>
nnoremap <M-j> :TmuxResizeDown<CR>
nnoremap <M-k> :TmuxResizeUp<CR>

nnoremap <Esc>h :TmuxResizeLeft<CR>
nnoremap <Esc>l :TmuxResizeRight<CR>
nnoremap <Esc>j :TmuxResizeDown<CR>
nnoremap <Esc>k :TmuxResizeUp<CR>
