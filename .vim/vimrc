execute pathogen#infect()

syntax enable

" Create highlight group for improper whitespace usage
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=5 guibg=red

colorscheme desert

set nobackup
set writebackup

set tabstop=4

set nocindent
set nosmartindent
set autoindent
set backspace=indent,eol,start
set encoding=utf-8

set number
set hlsearch
set mouse=a

set timeoutlen=0 ttimeoutlen=0

" English, do you speak it?
if has('win32')
    language english
else
    language en_US.UTF-8
endif

inoremap <S-Tab> <C-d>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

""" Colors and highlighting

" Color column 81 with light gray
set colorcolumn=81
highlight ColorColumn ctermbg=magenta

" Indicate current line with deep black
set cursorline
highlight CursorLine cterm=NONE ctermbg=black guibg=black

"
" netrw
"

let g:netrw_banner = 0
let g:netrw_sort_sequence = "[\/]$"

"
" YouCompleteMe
"
" YCM options are documented here:
"     https://github.com/Valloric/YouCompleteMe#options
"

" Fallback global YCM configuration file
let g:ycm_global_ycm_extra_conf = '~/.global_ycm_extra_conf.py'

" Do not use TAB for selection from completion list
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']

let g:ycm_warning_symbol = '~>'

" Do not ask if it is safe to load a configuration file. WARNING: allows
" execution of malicious .ycm_extra_conf.py.
let g:ycm_confirm_extra_conf = 0

" Highlight YCM errors with less acid color
highlight YcmErrorSection ctermbg=5

" Mappings for GoTo commands
nmap <F12> :YcmCompleter GoTo<CR>
nmap <C-S-g> :YcmCompleter GoToInclude<CR>

"
" Function to run each time when opening a new buffer
"

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match ExtraWhitespace /\s\+$\|\t/
    else
        match ExtraWhitespace /\s\+$/
    endif
endfunction

let g:tmux_resizer_no_mappings = 1

nnoremap <silent> <Esc>h :TmuxResizeLeft<CR>
nnoremap <silent> <Esc>j :TmuxResizeDown<CR>
nnoremap <silent> <Esc>k :TmuxResizeUp<CR>
nnoremap <silent> <Esc>l :TmuxResizeRight<CR>

nnoremap <silent> <M-h> :TmuxResizeLeft<CR>
nnoremap <silent> <M-j> :TmuxResizeDown<CR>
nnoremap <silent> <M-k> :TmuxResizeUp<CR>
nnoremap <silent> <M-l> :TmuxResizeRight<CR>
