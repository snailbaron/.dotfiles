call plug#begin()
    Plug 'https://github.com/chriskempson/base16-vim.git'
    Plug 'https://github.com/christoomey/vim-tmux-navigator.git'
    Plug 'https://github.com/dawikur/base16-vim-airline-themes.git'
    Plug 'https://github.com/dense-analysis/ale.git'
    Plug 'https://github.com/gerw/vim-HiLinkTrace.git'
    Plug 'https://github.com/junegunn/fzf',
        \ { 'do': { -> fzf#install() } }
    Plug 'https://github.com/preservim/nerdtree.git'
    Plug 'https://github.com/tpope/vim-dispatch.git'
    Plug 'https://github.com/tpope/vim-unimpaired.git'
    Plug 'https://github.com/tpope/vim-vinegar.git'
    Plug 'https://github.com/vim-airline/vim-airline.git'
    Plug 'https://github.com/ycm-core/YouCompleteMe.git',
        \ { 'do': './install.py --clangd-completer' }
    Plug 'https://github.com/zchee/vim-flatbuffers.git'
    Plug 'joshdick/onedark.vim'
    Plug 'kaicataldo/material.vim'
call plug#end()

filetype plugin on
filetype indent off

"let g:loaded_youcompleteme = 1
"let g:loaded_ale_dont_use_this_in_other_plugins_please = 1

syntax enable
set termguicolors

let g:material_theme_style = 'darker'
colorscheme material

" colorscheme base16-default-dark
" highlight SpellBad   cterm=None ctermfg=0 ctermbg=1
" highlight SpellLocal cterm=None ctermfg=0 ctermbg=12
" highlight SpellCap   cterm=None ctermfg=0 ctermbg=13
" highlight SpellRare  cterm=None ctermfg=0 ctermbg=14

set autoindent
set autoread
set backspace=indent,eol,start
set colorcolumn=81
if v:version >= 800
    set completeopt=menu,menuone,popup,noselect
else
    set completeopt=menu,menuone,preview
endif
set cursorline
set encoding=utf-8
set expandtab
set fillchars=vert:│,fold:-
set foldlevel=99
set foldmethod=manual
set formatoptions+=j
set history=1000
set hlsearch
set incsearch
set listchars=tab:▸\ ,lead:·,trail:·,extends:>,precedes:<,nbsp:+,eol:¬
set mouse=a
set nobackup
set nocindent
set nosmartindent
set number
set shiftwidth=4
set softtabstop=4
set splitbelow
set splitright
set tabstop=8
set timeoutlen=1000 ttimeoutlen=0
set ttymouse=xterm2  " makes mouse play nice with tmux
set wildmenu
set wildmode=longest:full
set writebackup

set langmap=
    \ё`,Ё~,
    \йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],
    \фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',
    \яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.
    \ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},
    \ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",
    \ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>

nnoremap <leader>l :set list!<CR>

" Process new buffer creation
autocmd BufNewFile,BufRead * call OnBufferOpen()

function! OnBufferOpen()
    " Highlight unnecessary whitespace
    if &filetype == "cpp"
        match Error /\s\+$\|\t/
    else
        match Error /\s\+$/
    endif
endfunction

autocmd FileType c,cpp setlocal ts=8 sts=4 sw=4 expandtab
autocmd FileType html,xml,fbs,yaml setlocal ts=8 sts=2 sw=2 expandtab
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

autocmd FileType cpp setlocal matchpairs=(:),{:},[:],<:>

packadd! matchit

" vim-airline
let g:airline_theme='base16_default_dark'

" NERDTree
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeMapJumpNextSibling = ''
let g:NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 50

nnoremap <silent> <F4> :NERDTreeToggle<CR>
noremap <silent> <F1> :NERDTreeFocus<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" vim-dispatch
nnoremap <silent> <F7> :Dispatch<CR>

" fzf
nnoremap <C-P> :FZF<CR>

" YouCompleteMe
let g:ycm_auto_hover = ''
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_clangd_args = [
    \ '--background-index',
    \ '--header-insertion=never',
    \ '--log=info',
    \ '--pretty',
    \ '-j=12'
    \ ]
let g:ycm_clangd_binary_path = exepath('clangd')
let g:ycm_clangd_uses_ycmd_caching = 0
let g:ycm_enable_semantic_highlighting = 1
let g:ycm_extra_conf_globlist = ['!~/*']
let g:ycm_global_ycm_extra_conf = '~/.global_ycm_extra_conf.py'
let g:ycm_min_num_of_chars_for_completion = 99
"let g:ycm_warning_symbol = '~>'

let g:ycm_filetype_blacklist = {
    \ 'nerdtree': 1
    \}

let g:ycm_language_server =
    \ [
    \   {
    \     'name': 'cmake',
    \     'cmdline': [ 'cmake-language-server' ],
    \     'filetypes': [ 'cmake' ],
    \   },
    \ ]

inoremap <C-l> <plug>(YCMToggleSignatureHelp)
nnoremap <leader>F <plug>(YCMFindSymbolInWorkspace)
nnoremap <leader>f <plug>(YCMFindSymbolInDocument)
nnoremap <leader>r :YcmCompleter GoToReferences<CR>
nnoremap <leader>R <cmd>execute 'YcmCompleter RefactorRename ' input('YCM Rename To: ')<CR>
nnoremap <leader>t :YcmCompleter GoToType<CR>
nnoremap <leader>A <cmd>YcmCompleter Format<CR>
nnoremap <leader>a <cmd>YcmCompleter FixIt<CR>
nnoremap <silent> K <plug>(YCMHover)
nnoremap <silent> gd :YcmCompleter GoTo<CR>
nnoremap <silent> gd :YcmCompleter GoTo<CR>

" Python virtual environment

function! Venv()
    py3 << EOF
import os
import sys

venv_path = "/home/immartynov/.venv"
activate_file_path = os.path.join(venv_path, 'bin/activate')
exec(open(activate_file_path).read(), dict(__file__=activate_file_path))
EOF
endfunction

" ALE

let g:ale_disable_lsp = 1
let g:ale_echo_msg_format = '[%linter%] [%severity%] (%code%) %s'

let g:ale_linters = {
\   'cpp': [],
\   'proto': ['buf_lint', 'protolint'],
\   'python': ['flake8', 'pylint', 'mypy'],
\   'yaml': [],
\ }

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\ }

let g:ale_python_flake8_options = '--ignore=E501'

" let g:ale_fix_on_save = 1

" vim-polyglot
let g:polyglot_disabled = ['sensible']

" vim-tmux-navigator mappings
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

" Seamless resize in Vim/tmux
let g:tmux_resize_vertical_step = 3
let g:tmux_resize_horizontal_step = 5

function! s:CanMove(vertical, screenpos)
    if a:vertical
        let windowTop = a:screenpos - winline() + 1
        let windowBottom = windowTop + winheight(0) + 2
        return [windowTop > 1, windowBottom < &lines]
    else
        let windowLeft = a:screenpos - wincol() + 1
        let windowRight = windowLeft + winwidth(0) - 1
        return [windowLeft > 1, windowRight < &columns]
    endif
endfunction

function! s:IsLastTmuxPane(forwardDirection)
    if a:forwardDirection == 'l'
        let pane_right = system("tmux display -p '#{pane_right}'")
        let window_width = system("tmux display -p '#{window_width}'")
        return pane_right + 1 == window_width
    elseif a:forwardDirection == 'j'
        let pane_bottom = system("tmux display -p '#{pane_bottom}'")
        let window_height = system("tmux display -p '#{window_height}'")
        return pane_bottom + 1 == window_height
    endif
endfunction

function! TmuxResize(positive, vertical, tmuxDirection, step, forwardDirection, backDirection)
    let position = [screencol(), screenrow()]
    let canMove = s:CanMove(a:vertical, position[a:vertical])
    let firstWindow = !canMove[0]
    let lastWindow = !canMove[1]

    if $TMUX != '' && lastWindow && (firstWindow || !s:IsLastTmuxPane(a:forwardDirection))
        silent call system('tmux resize-pane -' . a:tmuxDirection . ' ' . a:step)
        "redraw!
    else
        let sign = xor(a:positive, lastWindow) ? '+' : '-'
        let prefix = a:vertical ? '' : 'vertical '
        execute prefix . 'resize ' . sign . a:step
    endif
    "redraw!
endfunction

command! TmuxResizeLeft :call TmuxResize(0, 0, 'L', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeRight :call TmuxResize(1, 0, 'R', g:tmux_resize_horizontal_step, 'l', 'h')
command! TmuxResizeDown :call TmuxResize(1, 1, 'D', g:tmux_resize_vertical_step, 'j', 'k')
command! TmuxResizeUp :call TmuxResize(0, 1, 'U', g:tmux_resize_vertical_step, 'j', 'k')

nnoremap <silent> <M-h> :TmuxResizeLeft<CR>
nnoremap <silent> <M-l> :TmuxResizeRight<CR>
nnoremap <silent> <M-j> :TmuxResizeDown<CR>
nnoremap <silent> <M-k> :TmuxResizeUp<CR>

nnoremap <silent> <Esc>h :TmuxResizeLeft<CR>
nnoremap <silent> <Esc>l :TmuxResizeRight<CR>
nnoremap <silent> <Esc>j :TmuxResizeDown<CR>
nnoremap <silent> <Esc>k :TmuxResizeUp<CR>

" Terminal mode and termdebug
packadd termdebug

let g:termdebug_config = {
    \ 'wide': 1
    \ }

autocmd BufWinEnter,WinEnter term://* startinsert
autocmd BufLeave term://* stopinsert

hi debugPC term=reverse ctermbg=11 guibg=lightblue
hi debugBreakpoint term=reverse ctermbg=1 guibg=red

nmap <silent> <F5> :Run<CR>
nmap <silent> <F9> :Break<CR>
nmap <silent> <S-F9> :Clear<CR>
nmap <silent> <F11> :Step<CR>
nmap <silent> <F10> :Over<CR>
nmap <silent> <S-F7> :Finish<CR>

tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
"tnoremap <silent> <C-\> <C-w>:TmuxNavigatePrevious<cr>

tnoremap <silent> <M-h> <C-w>:TmuxResizeLeft<CR>
tnoremap <silent> <M-l> <C-w>:TmuxResizeRight<CR>
tnoremap <silent> <M-j> <C-w>:TmuxResizeDown<CR>
tnoremap <silent> <M-k> <C-w>:TmuxResizeUp<CR>

tnoremap <silent> <Esc>h <C-w>:TmuxResizeLeft<CR>
tnoremap <silent> <Esc>l <C-w>:TmuxResizeRight<CR>
tnoremap <silent> <Esc>j <C-w>:TmuxResizeDown<CR>
tnoremap <silent> <Esc>k <C-w>:TmuxResizeUp<CR>

silent! helptags ALL

let g:termdebug_config = {
\   'wide': 1
\ }

if filereadable(expand("~/.vimrc_local"))
    source ~/.vimrc_local
endif
